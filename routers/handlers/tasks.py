from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from keyboards.inline import main_menu, tasks_keyboard, back_button
from services.database import db
from utils.formatters import format_tasks_list
from states.user_states import TaskStates
from filters.task_filter import TaskCallbackFilter
from utils.logger import logger

router = Router()

@router.callback_query(F.data == "add_task")
async def add_task_start(callback: CallbackQuery, state: FSMContext):
    """–Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=back_button()
    )
    await state.set_state(TaskStates.waiting_task)
    await callback.answer()

@router.message(TaskStates.waiting_task)
async def add_task_finish(message: Message, state: FSMContext):
    """–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_text = message.text.strip()
    
    if len(task_text) > 200:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    success = await db.add_task(message.from_user.id, task_text)
    
    if success:
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: _{task_text}_",
            reply_markup=main_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    
    await state.clear()

@router.callback_query(F.data == "show_tasks")
async def show_tasks(callback: CallbackQuery):
    """–ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    tasks = await db.get_tasks(callback.from_user.id)
    text = format_tasks_list(tasks)
    
    if tasks:
        keyboard = tasks_keyboard(tasks)
    else:
        keyboard = back_button()
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(TaskCallbackFilter("complete_"))
async def complete_task(callback: CallbackQuery):
    """–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[1])
    success = await db.complete_task(callback.from_user.id, task_id)
    
    if success:
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = await db.get_tasks(callback.from_user.id)
        text = format_tasks_list(tasks)
        
        if tasks:
            keyboard = tasks_keyboard(tasks)
        else:
            keyboard = back_button()
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")